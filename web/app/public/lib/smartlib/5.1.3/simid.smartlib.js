"use strict";!function(e,i){"object"==typeof exports&&"object"==typeof module?module.exports=i():"function"==typeof define&&define.amd?define("simidSmartLibModule",[],i):"object"==typeof exports?exports.simidSmartLibModule=i():e.simidSmartLibModule=i()}("undefined"!=typeof self?self:global,(function(){return(("undefined"!=typeof self?self:global).webpackChunkSmartLibModule=("undefined"!=typeof self?self:global).webpackChunkSmartLibModule||[]).push([[19],{5905:function(e,i,r){r.r(i),r.d(i,{BrowserSimidControllerAdapter:function(){return f},GenericSimidControllerApi:function(){return u},SimidControllerManager:function(){return d},SimidControllerManagerHandler:function(){return I}});var t=r(8100),s=r(8379);const o="BpkSimidControllerMgr";class n{static loadSimidControllerAdapters(){return{}}}class d{static#e;smartLib;#i=n;#r={};#t;static getInstance(){return d.#e||(d.#e=new d),d.#e}init(e){this.#i===n&&(this.#i=e,this.#r=this.#i.loadSimidControllerAdapters(),s.g.v(o,"Compatible SIMID controllers: "+Object.keys(this.#r)))}release(){this.setSimidControllerAdapter(void 0)}attachInstance(e){this.smartLib=e}getSimidControllerAdapters(){return this.#r}getSimidControllerAdapter(){return this.#t}setSimidControllerAdapter(e){void 0!==this.#t&&this.#t!==e&&(s.g.i(o,"SIMID controller "+this.#t.getName()+" detached"),this.#t.detachSimidController()),this.#t!==e?this.#t=e:void 0!==e&&s.g.i(o,"SIMID controller "+this.#t.getName()+" already attached"),void 0!==e&&s.g.i(o,"SIMID controller "+e.getName()+" attached")}}const a="BpkSimidControllerAdapter";var l="SIMID:Creative:clickThru",m="SIMID:Player:startCreative",c="createSession",h="resolve";class p{handler;constructor(){this.simidSessions={}}getName(){return""}onMessageSent(e){let i;try{i=JSON.parse(e),i.messageId=parseInt(i.messageId,10)}catch(e){return void s.g.e(a,"Error: "+e.message)}if(i.type===m){if(void 0===this.simidSessions[i.sessionId])return void s.g.e(a,"Send startCreative message for a uninitialized SIMID session");this.simidSessions[i.sessionId].startMessageId=i.messageId}}onMessageReceived(e){let i;try{i=JSON.parse(e),i.messageId=parseInt(i.messageId,10)}catch(e){return void s.g.e(a,"Error: "+e.message)}switch(i.type){case l:if(void 0===this.simidSessions[i.sessionId])return void s.g.e(a,"Received a clickthru message for a uninitialized SIMID session");this.handler?.notifySimidClickthrough(i.args);break;case c:if(void 0!==this.simidSessions[i.sessionId])return void s.g.e(a,"SIMID session already created");this.simidSessions[i.sessionId]={id:i.sessionId},s.g.d(a,"SIMID session created with id "+i.sessionId);break;case h:if(void 0===this.simidSessions[i.sessionId])return void s.g.e(a,"Received a resolve message for a uninitialized SIMID session");void 0!==i.args?.messageId&&(i.args,this.simidSessions[i.sessionId].startMessageId)}}static checkSimidController(e){return s.g.e(a,"Implementation error: static checkSimidController not implemented for this adapter."),!1}attachSimidController(e,i){return s.g.e(a,"Implementation error: attachSimidController not implemented for this adapter."),!1}detachSimidController(e){return s.g.e(a,"Implementation error: detachSimidController not implemented for this adapter."),!1}attachSession(e){this.handler=e}detachSession(){this.handler=void 0,this.simidSessions={}}}var g=r(4404);class C extends p{simidController;constructor(){super()}getName(){return this.simidController.getSimidControllerName()}static checkSimidController(e){return g.A.hasMethods(e,["getSimidControllerName"])}attachSimidController(e,i){return!!C.checkSimidController(e)&&(this.simidController=e,this.simidController.simidControllerAdapter=this,!0)}detachSimidController(){this.simidController=void 0,this.handler=void 0,this.simidSessions={}}}const S="BpkGenericSimidControllerApi";class u{simidControllerAdapter;constructor(){}getSimidControllerName(){return""}onMessageReceived(e){void 0!==this.simidControllerAdapter?this.simidControllerAdapter.onMessageReceived(e):s.g.e(S,"Implementation error: session.attachSimidController(...) should be called prior to onMessageReceived.")}onMessageSent(e){void 0!==this.simidControllerAdapter?this.simidControllerAdapter.onMessageSent(e):s.g.e(S,"Implementation error: session.attachSimidController(...) should be called prior to onMessageSent.")}}r(1142).A.simidModule={SimidControllerManager:d,SimidControllerAdapter:p,GenericSimidControllerAdapter:C,GenericSimidControllerApi:u};class I{#s;loadSimidControllerAdapters(){return this.#s={},this.#s.generic=C,this.addAdapter("browser",t.A.simidModule?.BrowserSimidControllerAdapter),this.#s}addAdapter(e,i){void 0!==i&&(this.#s[e]=i)}attachSimidController(e,i){for(let r in this.#s)if(void 0!==this.#s[r]&&this.#s[r].checkSimidController(e)){const t=new this.#s[r];return t.attachSimidController(e,i),t}}}var v=r(1262);const M="BpkBrowserSimidControllerAdapter";class f extends p{simidController;allowedOrigin;postMessageCallback;getName(){return"Browser SIMID Controller"}static checkSimidController(e){return e?.setInterval&&e?.contentWindow?.self===e.contentWindow}attachSimidController(e,i){return!!f.checkSimidController(e)&&(void 0===i&&v.gD.getInstance().printWarnLogs(M,"Messages origin not specified, use at your own risk"),this.postMessageCallback=e=>{e.origin===this.allowedOrigin||void 0===this.allowedOrigin?this.onMessageReceived(e.data):v.gD.getInstance().printWarnLogs(M,"Message was meant for "+e.origin+", ignoring...")},this.allowedOrigin=i,this.simidController=e,this.simidController.addEventListener("message",this.postMessageCallback),!0)}detachSimidController(){void 0!==this.simidController&&(this.simidController.removeEventListener("message",this.postMessageCallback),this.simidController=void 0,this.allowedOrigin=void 0,this.postMessageCallback=void 0)}}t.A.simidModule={SimidControllerManagerHandler:I,BrowserSimidControllerAdapter:f,SimidControllerManager:d,GenericSimidControllerApi:u},t.A.getInstance().registerSimidControllerAdapters()}},function(e){return e.O(0,[256,153],(function(){return i=5905,e(e.s=i);var i})),e.O()}])}));